// This is a texture sampler.  It lets you sample textures!  The keyword
// "uniform" means constant - sort of.  The uniform variables are the same
// for all fragments in an object, but they can change in between objects.

uniform sampler2D diffuseMap; // Set to texture sampler 0
uniform sampler2D specularMap; // Set to texture sampler 1
uniform sampler2D normalMap; // Set to texture sampler 2
uniform sampler2D shadowMap; // Set to texture sampler 3

// Diffuse, ambient, and specular materials.  These are also uniform.
uniform vec3 Kd;
uniform vec3 Ks;
uniform vec3 Ka;
uniform float alpha;

// Are we doing the shadow pass?
uniform bool shadowPass;

// Are we doing normal mapping?
uniform bool mapNormals;

varying vec2 texcoord;
varying vec3 normal;
varying vec3 tangent;
varying vec3 bitangent;
varying vec3 eyePosition;
varying vec3 lightspacePosition;

vec3 mapNormal(in vec3 normIn) {

    // Sample the normal
    vec3 normSamp = texture2D(normalMap, texcoord).rgb;

    // Decompress
    vec3 decompressed = normSamp * 2.0 - 1.0;

    // Transform first by the TBN matrix, then by the lighting matrix
    mat3 tbn = mat3(tangent, bitangent, normal);
    return gl_NormalMatrix * (tbn * decompressed);
}

vec3 shadeFromLight(in int lightNum, in vec3 N, in vec3 L, in vec3 V) {

    // Calculate the diffuse color coefficient, and sample the diffuse texture
    float Rd = max(0.0, dot(L, N));
    vec3 Td = texture2D(diffuseMap, texcoord).rgb;
    vec3 diffuse = Rd * Kd * Td * gl_LightSource[lightNum].diffuse.rgb;

    // Calculate the specular coefficient
    vec3 R = reflect(-L, N);
    float Rs = pow(max(0.0, dot(V, R)), alpha);
    vec3 Ts = texture2D(specularMap, texcoord).rgb;
    vec3 specular = Rs * Ks * Ts * gl_LightSource[lightNum].specular.rgb;

    // Ambient is easy
    vec3 ambient = Ka * gl_LightSource[lightNum].ambient.rgb;

    return diffuse + specular + ambient;
}

vec4 mapValueToColor(float val) {
    vec4 turqoise = vec4(0,1,1,1);
    vec4 red = vec4(1,0,0,1);
    vec4 green = vec4(0,1,0,1);
    vec4 yellow = vec4(1,1,0,1);
    vec4 orange = vec4(1,0.75, 0.5,1);
    vec4 pink = vec4(1,0,1,1);
    if (val < 0.0)
        return turqoise;
    else if (val < 0.25)
        return red;
    else if (val < 0.5)
        return green;
    else if (val < 0.75)
        return yellow;
    else if (val < 1.0)
        return orange;
    else
        return pink;
}

void main() {

    // If we're doing the shadow pass, all we care about is the depth buffer,
    // which is taken care of automatically. Just write a solid color and be
    // done.
    if (shadowPass) {
        gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);
        return;
    }

    /*
     * Compute our directional vectors.
     */

    // Do normal mapping, if enabled
    vec3 N;
    if (mapNormals)
        N = normalize(mapNormal(normal));
    else
        N = normalize(normal);

    vec3 L0 = normalize(-gl_LightSource[0].position.xyz);
    vec3 L1 = normalize(gl_LightSource[1].position.xyz - eyePosition);
    vec3 V = normalize(-eyePosition);

    // Determine if the vertex is in shadow for the directional light
    vec2 shadowCoord = vec2(lightspacePosition.x, lightspacePosition.y);
    float shadowZ = texture2D(shadowMap, shadowCoord).r;
    bool inShadow = (shadowZ - lightspacePosition.z < 0.25001);

    // The contributions of lights are additive
    vec3 light0Contrib = inShadow ? vec3(0.0, 0.0, 0.0) : shadeFromLight(0, N, L0, V);
    vec3 light1Contrib = shadeFromLight(1, N, L1, V);

    // This actually writes to the frame buffer
    //gl_FragColor = vec4(light0Contrib + light1Contrib, 1);
    //gl_FragColor = vec4(shadowZ, shadowZ, shadowZ, 1);
    float lsZ = lightspacePosition.z;
    //gl_FragColor = mapValueToColor((shadowZ - 0.5) * 2.0);
    gl_FragColor = mapValueToColor(lsZ);
    //gl_FragColor = vec4(shadowZ - lightspacePosition.z, shadowZ - lightspacePosition.z,
    //                    shadowZ - lightspacePosition.z, 1);
    //gl_FragColor = vec4(lightspacePosition.z / shadowZ, lightspacePosition.z / shadowZ, lightspacePosition.z / shadowZ, 1);
    //gl_FragColor = inShadow ? vec4(1, 0, 0, 1) : vec4(0,0,1,1);
    //gl_FragColor = vec4(texture2D(shadowMap, shadowCoord).xyz, 1);
    /*
    vec4 red = vec4(1,0,0,1);
    vec4 green = vec4(0,1,0,1);
    vec4 foo = vec4(1,1,0,1);
    vec4 bar = vec4(1,0,1,1);
    vec4 zed = vec4(0,1,1,1);
    if (lightspacePosition.x < 0.0)
        gl_FragColor = zed;
    else if (lightspacePosition.x < 0.25)
        gl_FragColor = red;
    else if (lightspacePosition.x < 0.5)
        gl_FragColor = green;
    else if (lightspacePosition.x < 0.75)
        gl_FragColor = foo;
    else
        gl_FragColor = bar;
        */
    //gl_FragColor = vec4(lightspacePosition.x, lightspacePosition.x, lightspacePosition.x, 1.0);
}
